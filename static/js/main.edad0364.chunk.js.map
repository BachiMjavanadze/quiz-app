{"version":3,"sources":["helpers.js","components/AnswersReview.jsx","components/TotalResults.jsx","components/QuizAnswers.jsx","components/QuizCategories.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["styles","paper","background","padding","marginTop","marginBottom","borderRadius","boxShadow","mainTitle","fontSize","submitButton","backgroundColor","question","fontWeight","lineHeight","answer","marginLeft","display","correctAnswer","color","results","margin","maxWidth","textAlign","flexDirection","difficulties","id","name","createMarkup","text","__html","AnswersReview","answers","processedAnswers","classes","resetQuiz","Typography","variant","className","map","isCorrect","wrongAnswer","Paper","dangerouslySetInnerHTML","Check","Close","Button","onClick","TotalResults","currentQuizStep","setCurrentQuizStep","useEffect","window","scrollTo","filter","length","e","QuizAnswers","quizData","useState","selectedAnswers","setSelectedAnswers","setProcessedAnswers","relatedAnswer","relatedQuestion","find","onSubmit","preventDefault","category","correct_answer","Grid","container","spacing","item","xs","quiz","FormControl","fullWidth","InputLabel","Select","required","label","value","labelId","onChange","selectedQuestion","target","isExistQuestion","updatedAnswers","handleAnswerChange","MenuItem","type","useStyles","makeStyles","theme","QuizCategories","categories","setCategories","setCategory","quizNumber","setQuizNumber","difficulty","setDifficulty","setQuizData","fetchQuizData","a","url","toLowerCase","axios","get","data","formattedCategory","cat","incorrectAnswersIndexes","incorrect_answers","randomIndex","Math","round","random","splice","console","log","fetchCategories","trivia_categories","Container","selectedCategory","selectedDifficulty","diff","TextField","inputProps","min","max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edad0364.chunk.js","sourcesContent":["export const styles = {\n  paper: {\n    background: \"linear-gradient(to bottom, lightgray, lightblue)\",\n    padding: \"20px\",\n    marginTop: \"20px\",\n    marginBottom: \"20px\",\n    borderRadius: \"20px\",\n    boxShadow:\n      \"0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(0, 0, 0, 0.2)\",\n  },\n  mainTitle: {\n    fontSize: \"45px\",\n    marginBottom: \"20px\",\n  },\n  submitButton: {\n    marginTop: \"20px\",\n    borderRadius: \"999px\",\n    background: \"#9c27b0\",\n    \"&:hover\": {\n      backgroundColor: \"#9c27b0\",\n      boxShadow:\n        \"0 14px 26px -12px rgba(156, 39, 176, 0.42), 0 4px 23px 0px rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba(156, 39, 176, 0.2)\",\n    },\n  },\n  question: {\n    fontSize: \"24px\",\n    marginBottom: \"10px\",\n    fontWeight: \"500\",\n    lineHeight: \"35px\",\n  },\n  answer: {\n    fontSize: \"18px\",\n    marginBottom: \"10px\",\n    fontWeight: \"500\",\n    lineHeight: \"25px\",\n    marginLeft: \"10px\",\n    display: \"flex\",\n  },\n  correctAnswer: {\n    color: \"green\",\n  },\n  results: {\n    display: \"flex\",\n    margin: \"0 auto\",\n    maxWidth: \"150px\",\n    textAlign: \"center\",\n    flexDirection: \"column\",\n  },\n};\n\nexport const difficulties = [\n  { id: \"total_easy_question_count\", name: \"Easy\" },\n  { id: \"total_medium_question_count\", name: \"Medium\" },\n  { id: \"total_hard_question_count\", name: \"Hard\" },\n];\n\nexport const createMarkup = (text) => {\n  return { __html: text };\n};\n","import { Paper, Button, Typography } from \"@material-ui/core\";\nimport { Check, Close } from \"@material-ui/icons\";\nimport { createMarkup } from \"../helpers\";\n\nconst AnswersReview = ({ processedAnswers, classes, resetQuiz }) => {\n  const renderAnswers = (answers) => {\n    return answers.map(\n      ({ question, isCorrect, correctAnswer, wrongAnswer }) => (\n        <Paper key={question} className={classes.paper}>\n          <Typography variant=\"h2\" className={classes.question}>\n            <span dangerouslySetInnerHTML={createMarkup(question)} />\n          </Typography>\n\n          {isCorrect ? (\n            <Typography\n              variant=\"h2\"\n              className={`${classes.answer} ${classes.correctAnswer}`}\n            >\n              <Check />\n              <span\n                className={classes.answer}\n                dangerouslySetInnerHTML={createMarkup(correctAnswer)}\n              />\n            </Typography>\n          ) : (\n            <>\n              <Typography\n                variant=\"h3\"\n                color=\"secondary\"\n                className={classes.answer}\n              >\n                <Close />\n                <span\n                  className={classes.answer}\n                  dangerouslySetInnerHTML={createMarkup(wrongAnswer)}\n                />\n              </Typography>\n              <Typography\n                variant=\"h3\"\n                className={`${classes.answer} ${classes.correctAnswer}`}\n              >\n                <Check />\n                <span\n                  className={classes.answer}\n                  dangerouslySetInnerHTML={createMarkup(correctAnswer)}\n                />\n              </Typography>\n            </>\n          )}\n        </Paper>\n      )\n    );\n  };\n\n  return (\n    <>\n      <Typography variant=\"h1\" className={classes.mainTitle}>\n        Answers review:\n      </Typography>\n      {renderAnswers(processedAnswers)}\n      <Button\n        className={classes.submitButton}\n        onClick={resetQuiz}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Reset\n      </Button>\n    </>\n  );\n};\n\nexport default AnswersReview;\n","import { Button, Typography } from \"@material-ui/core\";\nimport AnswersReview from \"./AnswersReview\";\nimport { useEffect } from \"react\";\n\nconst TotalResults = ({\n  classes,\n  resetQuiz,\n  currentQuizStep,\n  processedAnswers,\n  setCurrentQuizStep,\n}) => {\n  useEffect(() => {\n    window.scrollTo(0, \"20px\");\n  }, []);\n  return currentQuizStep === \"results\" ? (\n    <div className={classes.results}>\n      <Typography variant=\"h1\" className={classes.mainTitle}>\n        Results\n      </Typography>\n      <Typography variant=\"h4\">\n        {processedAnswers.filter(({ isCorrect }) => isCorrect).length} out of{\" \"}\n        {processedAnswers.length}\n      </Typography>\n      <Button\n        onClick={(e) => {\n          setCurrentQuizStep(\"review\");\n        }}\n        className={classes.submitButton}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Review\n      </Button>{\" \"}\n      <Button\n        onClick={resetQuiz}\n        className={classes.submitButton}\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Reset\n      </Button>\n    </div>\n  ) : (\n    <AnswersReview\n      classes={classes}\n      resetQuiz={resetQuiz}\n      processedAnswers={processedAnswers}\n    />\n  );\n};\n\nexport default TotalResults;\n","import {\n  Grid,\n  Paper,\n  Select,\n  Button,\n  MenuItem,\n  Typography,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { createMarkup } from \"../helpers\";\nimport TotalResults from \"./TotalResults\";\n\nconst QuizAnswers = ({\n  classes,\n  quizData,\n  resetQuiz,\n  currentQuizStep,\n  setCurrentQuizStep,\n}) => {\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [processedAnswers, setProcessedAnswers] = useState([]);\n\n  const handleResult = (e) => {\n    e.preventDefault();\n\n    const processedAnswers = selectedAnswers.map(({ answer, question }) => {\n      const relatedQuestion = quizData.find(\n        (category) => category.question === question\n      );\n      if (relatedQuestion.correct_answer === answer) {\n        return { correctAnswer: answer, isCorrect: true, question };\n      }\n      return {\n        correctAnswer: relatedQuestion.correct_answer,\n        wrongAnswer: answer,\n        isCorrect: false,\n        question,\n      };\n    });\n\n    setProcessedAnswers(processedAnswers);\n  };\n\n  const handleAnswerChange = (e, selectedQuestion) => {\n    e.preventDefault();\n    const { value } = e.target;\n\n    const isExistQuestion =\n      selectedAnswers.length &&\n      selectedAnswers.find((answer) => answer.question === selectedQuestion);\n\n    if (isExistQuestion && isExistQuestion.answer) {\n      const updatedAnswers = selectedAnswers.map((answer) => {\n        if (answer.question === selectedQuestion) {\n          return { question: selectedQuestion, answer: value };\n        }\n        return answer;\n      });\n      setSelectedAnswers(updatedAnswers);\n    } else {\n      setSelectedAnswers([\n        ...selectedAnswers,\n        { question: selectedQuestion, answer: value },\n      ]);\n    }\n  };\n\n  const relatedAnswer = (question, selectedAnswers) => {\n    if (selectedAnswers && selectedAnswers.length) {\n      const relatedQuestion = selectedAnswers.find(\n        (answer) => answer.question === question\n      );\n      return (relatedQuestion && relatedQuestion.answer) || \"\";\n    }\n    return \"\";\n  };\n\n  useEffect(() => {\n    window.scrollTo(0, \"20px\");\n  }, []);\n\n  return !processedAnswers || !processedAnswers.length ? (\n    <>\n      <Typography variant=\"h1\" className={classes.mainTitle}>\n        Answer flowing Questions:\n      </Typography>\n      <form onSubmit={handleResult}>\n        <Grid container spacing={4}>\n          <Grid item xs={12}>\n            {quizData.map((quiz) => (\n              <Paper key={quiz.question} className={classes.paper}>\n                <Typography variant=\"h5\" className={classes.question}>\n                  <span dangerouslySetInnerHTML={createMarkup(quiz.question)} />\n                </Typography>\n                <FormControl fullWidth variant=\"outlined\">\n                  <InputLabel id=\"answer-select-label\">\n                    Select answer:\n                  </InputLabel>\n                  <Select\n                    required\n                    name=\"answer\"\n                    id=\"answer-select\"\n                    label=\"Select answer\"\n                    value={relatedAnswer(quiz.question, selectedAnswers) || \"\"}\n                    labelId=\"answer-select-label\"\n                    onChange={(e) => handleAnswerChange(e, quiz.question)}\n                  >\n                    {quiz.answers.map((answer) => (\n                      <MenuItem key={answer} value={answer}>\n                        <span dangerouslySetInnerHTML={createMarkup(answer)} />\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Paper>\n            ))}\n            <Button\n              className={classes.submitButton}\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n            >\n              Result\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  ) : (\n    <TotalResults\n      classes={classes}\n      resetQuiz={resetQuiz}\n      currentQuizStep={currentQuizStep}\n      processedAnswers={processedAnswers}\n      setCurrentQuizStep={setCurrentQuizStep}\n    />\n  );\n};\n\nexport default QuizAnswers;\n","import {\n  Grid,\n  Paper,\n  Select,\n  Button,\n  MenuItem,\n  TextField,\n  Container,\n  Typography,\n  InputLabel,\n  FormControl,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { styles, difficulties, createMarkup } from \"../helpers\";\nimport QuizAnswers from \"./QuizAnswers\";\n\nconst useStyles = makeStyles((theme) => {\n  return styles;\n});\n\nconst QuizCategories = () => {\n  const [categories, setCategories] = useState([]);\n  const [category, setCategory] = useState({ id: \"\", name: \"\" });\n\n  const [quizNumber, setQuizNumber] = useState(null);\n  const [difficulty, setDifficulty] = useState({ id: \"\", name: \"\" });\n\n  const [quizData, setQuizData] = useState([]);\n  const classes = useStyles();\n\n  const [currentQuizStep, setCurrentQuizStep] = useState(\"start\");\n\n  const fetchQuizData = async () => {\n    try {\n      const url = `https://opentdb.com/api.php?amount=${quizNumber}&category=${category.id\n        }&difficulty=${difficulty.name.toLowerCase()}`;\n      const { data } = await axios.get(url);\n\n      const formattedCategory = data.results.map((cat) => {\n\n        const incorrectAnswersIndexes = cat.incorrect_answers.length;\n        const randomIndex = Math.round(Math.random() * (incorrectAnswersIndexes - 0) + 0);\n\n        cat.incorrect_answers.splice(randomIndex, 0, cat.correct_answer);\n\n        return {\n          ...cat,\n          answers: cat.incorrect_answers,\n        };\n      });\n\n      setQuizData(formattedCategory);\n      setCurrentQuizStep(\"results\");\n    } catch (error) {\n      console.log(\"Fetch quiz error =====>>>>\", error);\n    }\n  };\n\n  const fetchCategories = async () => {\n    const { data } = await axios.get(`https://opentdb.com/api_category.php`);\n    setCategories(data.trivia_categories);\n  };\n\n  useEffect(() => {\n    fetchCategories();\n    window.scrollTo(0, \"20px\");\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!quizData.length && quizNumber && category.id && difficulty) {\n      fetchQuizData();\n    }\n  };\n\n  const handleSelectChange = (e) => {\n    e.preventDefault();\n    const selectedCategory = categories.find(\n      (cat) => cat.id === e.target.value\n    );\n    setCategory(selectedCategory);\n  };\n\n  const handleDifficultyChange = (e) => {\n    e.preventDefault();\n    const selectedDifficulty = difficulties.find(\n      (diff) => diff.id === e.target.value\n    );\n    setDifficulty(selectedDifficulty);\n  };\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setQuizNumber(e.target.value);\n  };\n\n  const resetQuiz = (e) => {\n    e.preventDefault();\n    setQuizData([]);\n    setCategory(\"\");\n    setQuizNumber(\"\");\n    setDifficulty(\"\");\n    setCurrentQuizStep(\"start\");\n    window.scrollTo(0, \"20px\");\n  };\n\n  if (!categories.length) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <Paper className={classes.paper}>\n        {currentQuizStep === \"start\" ? (\n          <>\n            <Typography variant=\"h1\" className={classes.mainTitle}>\n              Get Questions:\n            </Typography>\n            <form onSubmit={handleSubmit}>\n              <Grid container spacing={4}>\n                <Grid item xs={12}>\n                  <FormControl fullWidth variant=\"outlined\">\n                    <InputLabel id=\"category-select-label\">\n                      Select category:\n                    </InputLabel>\n                    <Select\n                      required\n                      name=\"category\"\n                      value={category.id || \"\"}\n                      id=\"category-select\"\n                      label=\"Select category\"\n                      labelId=\"category-select-label\"\n                      onChange={handleSelectChange}\n                    >\n                      {categories.map((category) => (\n                        <MenuItem key={category.id} value={category.id}>\n                          <span\n                            dangerouslySetInnerHTML={createMarkup(\n                              category.name\n                            )}\n                          />\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControl fullWidth variant=\"outlined\">\n                    <InputLabel id=\"difficulty-select-label\">\n                      Select Difficulty:\n                    </InputLabel>\n                    <Select\n                      required\n                      name=\"difficulty\"\n                      value={difficulty.id || \"\"}\n                      id=\"difficulty-select\"\n                      label=\"Select Difficulty\"\n                      labelId=\"difficulty-select-label\"\n                      onChange={handleDifficultyChange}\n                    >\n                      {difficulties.map((difficulty) => (\n                        <MenuItem key={difficulty.id} value={difficulty.id}>\n                          {difficulty.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                  <TextField\n                    inputProps={{ min: 1, max: 10 }}\n                    required\n                    fullWidth\n                    type=\"number\"\n                    id=\"quiz-number\"\n                    variant=\"outlined\"\n                    name=\"quiz-number\"\n                    label={`Add a quiz number from 1 to 10`}\n                    value={quizNumber || \"\"}\n                    onChange={handleChange}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                className={classes.submitButton}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                Submit\n              </Button>\n            </form>\n          </>\n        ) : (\n          <QuizAnswers\n            classes={classes}\n            quizData={quizData}\n            resetQuiz={resetQuiz}\n            categories={categories}\n            currentQuizStep={currentQuizStep}\n            setCurrentQuizStep={setCurrentQuizStep}\n          />\n        )}\n      </Paper>\n    </Container>\n  );\n};\n\nexport default QuizCategories;\n","import QuizCategories from \"./components/QuizCategories\";\n\nconst App = () => {\n  return <QuizCategories />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}